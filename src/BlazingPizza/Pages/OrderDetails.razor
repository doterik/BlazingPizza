@page "/myorders/{orderId:int}"
@implements IDisposable
@layout ForceSignInLayout
@using System.Threading
@inject IPizzaStore Store
@inject OrderStatusUpdater OrderStatusUpdater


<div class="main">
    @if (invalidOrder)
    {
        <h2>Nope</h2>
        <p>Sorry, this order could not be loaded.</p>
    }
    else if (order == null)
    {
        <text>Loading...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order placed @order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@order.Status</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    @foreach (var pizza in order.Pizzas)
                    {
                        <p>
                            <strong>
                                @(pizza.Size)"
                                @pizza.Special.Name
                                (£@pizza.GetFormattedTotalPrice())
                            </strong>
                        </p>

                        <ul>
                            @foreach (var topping in pizza.Toppings)
                            {
                                <li>+ @topping.Topping.Name</li>
                            }
                        </ul>
                    }

                    <p>
                        <strong>
                            Total price:
                            £@order.GetFormattedTotalPrice()
                        </strong>
                    </p>
                </div>
                <div class="track-order-map">
                    <Map Zoom="13" Markers="GetMapMarkers()" />
                </div>
            </div>
        </div>
    }
</div>

@functions {
    [Parameter] int OrderId { get; set; }
    [CascadingParameter] UserStateProvider UserState { get; set; }

    Order order;
    bool invalidOrder;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OrderDetails.OnParametersSetAsync");
        try
        {
            order = await Store.GetOrder(OrderId, UserState.CurrentUser.DisplayName);
            Console.WriteLine($"Retrived order details for order {OrderId}");
            invalidOrder = order == null;
            Console.WriteLine($"invalidOrder: {invalidOrder}");
            Console.WriteLine($"order.State: {order.Status}");
            if (!invalidOrder && order.Status != "Delivered")
            {
                Console.WriteLine($"Added OrderStatusChanged event handler");
                OrderStatusUpdater.OrderStatusChanged += OrderStatusChanged;
            }
        }
        catch (Exception ex)
        {
            invalidOrder = true;
            Console.Error.WriteLine(ex);
        }
    }

    void OrderStatusChanged(object sender, OrderStatus orderStatus)
    {
        Invoke(() =>
        {
            Console.WriteLine($"OrderDetails for order {order.OrderId} recevied OrderStatusChanged for order {orderStatus.OrderId}");
            if (orderStatus.OrderId == order.OrderId)
            {
                order.Status = orderStatus.Status;
                order.CurrentLocation = orderStatus.CurrentLocation;
                StateHasChanged();
                Console.WriteLine($"OrderDetails for order {order.OrderId} state has changed");
            }
        });
    }


    List<Marker> GetMapMarkers()
    {
        var mapMarkers = new List<Marker>();
        mapMarkers.Add(ToMapMarker(order.Status == "Delivered" ? "Delivery location" : "You", order.DeliveryLocation, showPopup: true));
        if (order.Status == "Out for delivery")
        {
            mapMarkers.Add(ToMapMarker("Driver", order.CurrentLocation, showPopup: true));
        }

        return mapMarkers;
    }

    static Marker ToMapMarker(string description, LatLong coords, bool showPopup = false)
            => new Marker { Description = description, X = coords.Longitude, Y = coords.Latitude, ShowPopup = showPopup };

    void IDisposable.Dispose()
    {
        OrderStatusUpdater.OrderStatusChanged -= OrderStatusChanged;
        Console.WriteLine($"Removed OrderStatusChanged event handler");
    }
}
